{"version":3,"sources":["service.tsx","ImageTable.tsx","Annotator.tsx","AnnotationList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SERVER_URL","uploadAnnotation","imagePath","annotation","data","fetch","method","mode","cache","headers","body","JSON","stringify","window","location","href","startsWith","console","log","ImageTable","props","images","options","padding","pageSize","pageSizeOptions","rowStyle","row","backgroundColor","selectedImage","path","sorting","columns","field","width","render","alt","height","src","title","customSort","a","b","items","length","Icon","onRowClick","_evt","selectedRow","onSelect","Object","values","Annotator","image","astate","React","useState","zoom","setZoom","svgRef","useRef","image_url","Box","m","ButtonGroup","Button","onClick","disabled","changed","save","revert","ref","onMouseDown","evt","current","dim","getBoundingClientRect","x","clientX","left","y","clientY","top","newItems","undefined","selectedId","id","setAstate","viewBox","style","map","key","cx","cy","r","stroke","strokeWidth","fill","i","x1","y1","x2","y2","AnnotationList","InfoState","paging","showTitle","search","toolbar","toFixed","onUpdate","newList","item","push","emptyAnnotation","App","setImages","currentImage","setCurrentImage","annotationBackup","state","LOADING","info","setInfo","setCurrent","iinfo","newAnnotation","useEffect","then","response","json","catch","e","ERROR","message","ok","status","tmp","CircularProgress","color","Grid","container","spacing","xs","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.9593f518.chunk.js","sourcesContent":["import { Annotation } from './ImageInfo';\n\n\nexport let SERVER_URL = \"\";\n\nif (window.location.href.startsWith(\"http://localhost:3000\")) {\n  console.log(\"DEV mode detected, connecting to http://localhost:3800\");\n  SERVER_URL = \"http://localhost:3800\";\n}\n\n\n\nfunction doPost(url: string, data: any): Promise<Response> {\n    return fetch(url, {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data),\n    })\n}\n\nexport function uploadAnnotation(imagePath: string, annotation: Annotation): Promise<Response> {\n    return doPost(SERVER_URL + '/annotation/' + imagePath, annotation)\n}","import React from 'react';\nimport { ImageInfo, ImageMap } from './ImageInfo';\nimport MaterialTable from 'material-table'\nimport { SERVER_URL } from './service';\n\n\nimport Icon from '@material-ui/core/Icon';\n\n\n\nfunction ImageTable(props: {images: ImageMap, selectedImage?: ImageInfo, onSelect: (iinfo?: ImageInfo) => void}) {\n  const images = props.images;\n\n  if (images == null) {\n    return <div>Loading ...</div>\n  }\n\n  return (\n    <MaterialTable\n      options={{\n        padding: \"dense\",\n        pageSize: 8,\n        pageSizeOptions: [8, 50, 100],\n        rowStyle: row => ({\n          backgroundColor: (props.selectedImage && props.selectedImage.path === row.path) ? '#EEE' : '#FFF'\n        }),\n        sorting: true,\n      }}\n      columns={[\n        {\n          field: 'id',\n          width: 50,\n          render: row => <img alt=\"\" width={40} height={40} src={SERVER_URL + \"/preview/\" + row.path}/>\n        },\n        { title: 'Image', field: 'path' },\n        { title: 'Size',\n          customSort: (a, b) => a.width * a.height - b.width * b.height,\n          render: row => row.width + \"x\" + row.height\n        },\n        { title: 'Label',\n          field: 'annotation',\n          render: row => (row.annotation && row.annotation.items.length > 0)?(<Icon>done</Icon>):\"\"\n        },\n      ]}\n      onRowClick={((_evt, selectedRow) => props.onSelect(selectedRow))}\n      data={Object.values(images)}\n      title=\"Images\"/>\n  );\n}\n\n\nexport default ImageTable;\n","import React from 'react';\nimport { MouseEvent } from 'react';\n//import { Button, TableContainer, TableHead, TableCell, TableBody, Table, TableRow, TableFooter, TablePagination } from '@material-ui/core';\nimport { ImageInfo } from './ImageInfo';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Box from '@material-ui/core/Box';\nimport { SERVER_URL } from './service';\nimport { AnnotationState } from './ImageInfo';\n\n\nexport function Annotator(props: {image?: ImageInfo, astate: AnnotationState, setAstate: (astate: AnnotationState) => void, revert: () => void, save: () => void}) {\n    let image = props.image;\n\n    const annotation = props.astate.annotation;\n    const [zoom, setZoom] = React.useState<number>(1);\n    const svgRef = React.useRef<SVGSVGElement>(null);\n\n    if (!image) {\n        return <span>No Image</span>\n    }\n\n    let image_url = SERVER_URL + \"/image/\" + image.path;\n    let width = 2 / zoom;\n\n    const ZOOM_STEP = 0.25;\n\n    const onClick = (evt: MouseEvent<SVGSVGElement>) => {\n        //const e = evt.target as HTMLElement;\n        //const dim = e.getBoundingClientRect();\n\n        let current : unknown = svgRef.current;\n        if (current === null) {\n            return;\n        }\n\n        const dim = (current as HTMLElement).getBoundingClientRect()\n        const x = evt.clientX - dim.left;\n        const y = evt.clientY - dim.top;\n        const astate = props.astate;\n        if (!astate.annotation) {\n            return;\n        }\n        const items = astate.annotation.items;\n        let newItems;\n        if (astate.selectedId !== undefined) {\n            newItems = [...items];\n            newItems[astate.selectedId] = {id: astate.selectedId, x: x / zoom, y: y / zoom}\n        } else {\n            newItems = [...items, {id: items.length, x: x / zoom, y: y / zoom}];\n        }\n        props.setAstate({\n            ...astate,\n            annotation: {\n                ...astate.annotation,\n                items: newItems,\n            }\n        })\n    };\n\n    return (\n    <Box m={1}>\n        <Box m={1}>\n        <ButtonGroup>\n            <Button onClick={()=> setZoom(zoom + ZOOM_STEP)}>+</Button>\n            <Button onClick={()=> setZoom(zoom - ZOOM_STEP)}>-</Button>\n        </ButtonGroup>\n        <ButtonGroup>\n        <Button disabled={!props.astate.changed} onClick={props.save}>Save</Button>\n        <Button disabled={!props.astate.changed} onClick={props.revert}>Revert</Button>\n        </ButtonGroup>\n        </Box>\n        <Box>\n        <svg\n             ref={svgRef}\n             onMouseDown={onClick}\n            viewBox={\"0 0 \" + image.width + \" \" + image.height} style={{width: image.width * zoom, height: image.height * zoom}}>\n            <image href={image_url} height={image.height} width={image.width}/>\n            {\n                annotation?(annotation.items.map((a) => {\n                    if (a.id === props.astate.selectedId) {\n                        return <circle key={\"circ\" + a.id} cx={a.x} cy={a.y} r={width*2} stroke={\"#ff0\"} strokeWidth={width} fill=\"#f0f\"/>\n                    } else {\n                        return <circle key={\"circ\" + a.id} cx={a.x} cy={a.y} r={width*2} stroke={\"#f0f\"} strokeWidth={width} fill=\"none\"/>\n                    }\n                })):null\n            }\n            {\n                annotation?(annotation.items.map((a, i) =>\n                    i > 0?<line key={\"line\" + a.id} x1={a.x} y1={a.y} x2={annotation!.items[i-1].x} y2={annotation!.items[i-1].y} stroke=\"#f0f\" strokeWidth={width}/>:null\n                )):null\n            }\n        </svg>\n        </Box>\n    </Box>);\n}\n\n\nexport default Annotator;","import React from 'react';\n//import { Button, TableContainer, TableHead, TableCell, TableBody, Table, TableRow, TableFooter, TablePagination } from '@material-ui/core';\nimport MaterialTable from 'material-table'\nimport { AnnotationState } from './ImageInfo';\nimport { Box } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\n\n\nexport function AnnotationList(props: {astate: AnnotationState, onUpdate: (astate: AnnotationState) => void}) {\n  let annotation = props.astate.annotation;\n\n  if (annotation == null) {\n    return <span>Loading ...</span>\n  }\n\n  const deleteItem = () => {\n    let id = props.astate.selectedId;\n    if (id === undefined) {\n      return;\n    }\n    let newList = [];\n    for (let item of props.astate.annotation.items) {\n      if (item.id < id) {\n        newList.push(item);\n      }\n      if (item.id > id) {\n        newList.push({...item, id: item.id - 1});\n      }\n    }\n    props.onUpdate({...props.astate, selectedId: undefined, annotation: {...props.astate.annotation, items: newList}});\n  }\n\n  return (\n    <Box>\n    <MaterialTable\n      options={{\n        padding: \"dense\",\n        paging: false,\n        showTitle: false,\n        search: false,\n        toolbar: false,\n        rowStyle: row => ({\n          backgroundColor: (props.astate.selectedId === row.id) ? '#EEE' : '#FFF'\n        })\n      }}\n      columns={[\n        {\n          title: 'id',\n          field: 'id',\n          width: 20,\n        },\n        { title: 'Position',\n          render: row => row.x.toFixed(2) + \",\" + row.y.toFixed(2)\n        },\n      ]}\n      onRowClick={(_evt, selectedRow) => {\n          if (!selectedRow || props.astate.selectedId === selectedRow.id) {\n            props.onUpdate({...props.astate, selectedId: undefined})\n          } else {\n            props.onUpdate({...props.astate, selectedId: selectedRow?.id})\n          }\n      }}\n      data={annotation.items.map(a => ({...a}))}\n     />\n    <ButtonGroup>\n        <Button onClick={deleteItem} disabled={props.astate.selectedId === undefined}>Remove</Button>\n        <Button disabled={props.astate.selectedId === undefined}>Split</Button>\n    </ButtonGroup>\n     </Box>\n  );\n}\n\n\nexport default AnnotationList;\n","import React from 'react';\nimport './App.css';\nimport ImageTable from './ImageTable';\nimport { Grid, Box } from '@material-ui/core';\nimport { ImageInfo, ImageMap } from './ImageInfo';\nimport { Annotator } from './Annotator';\nimport AnnotationList from './AnnotationList';\nimport { AnnotationState } from './ImageInfo';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { SERVER_URL, uploadAnnotation } from './service';\n\n\nconst emptyAnnotation = {items:\n        //[{id: 0, x: 100, y: 100}, {id: 1, x: 120, y: 90}, {id: 2, x: 220, y: 90}]\n        [],\n};\n\n\nenum InfoState {\n    LOADING,\n    ERROR\n}\n\ninterface Info {\n    state: InfoState,\n    message?: string,\n}\n\n\n\nfunction App() {\n    //const [images, setImages] = React.useState([]);\n    const [images, setImages] = React.useState<ImageMap>({});\n    const [currentImage, setCurrentImage] = React.useState<ImageInfo | undefined>(undefined);\n    const [astate, setAstate] = React.useState<AnnotationState>({annotation: emptyAnnotation, changed: false, annotationBackup: emptyAnnotation});\n    const [info, setInfo] = React.useState<Info | null>({state: InfoState.LOADING});\n\n    const setCurrent = (iinfo?: ImageInfo) => {\n        save()\n        let newAnnotation;\n        if (iinfo && iinfo.annotation) {\n            newAnnotation = iinfo.annotation;\n        } else {\n            newAnnotation = emptyAnnotation;\n        }\n        setAstate({annotation: newAnnotation, changed: false, annotationBackup: newAnnotation});\n        setCurrentImage(iinfo);\n    }\n\n    React.useEffect(() => {\n        fetch(SERVER_URL + '/images')\n        .then(response => response.json())\n        .then(data => {\n            setInfo(null);\n            setImages(data);\n            if (data) {\n                setCurrent(Object.values(data)[0] as ImageInfo);\n            } else {\n                setCurrent(undefined);\n            }\n        }).catch(e => {\n            setInfo({state: InfoState.ERROR, message: \"Connection to service failed:\" + e})\n        })\n    }, []);\n\n    const updateAState = (astate: AnnotationState) => {\n        astate.changed = true;\n        setAstate(astate);\n    }\n\n    const save = () => {\n        if (astate.changed && images && currentImage) {\n            uploadAnnotation(currentImage.path, astate.annotation).then(r =>\n                {\n                    console.log(r);\n                    if (!r.ok || r.status !== 200) {\n                        setInfo({state: InfoState.ERROR, message: \"Uploading annotation failed\"})\n                    }\n                });\n            let annotation = astate.annotation;\n            let tmp = {...images};\n            tmp[currentImage.path] = {...currentImage, annotation: annotation}\n            setImages(tmp);\n            setAstate({...astate, changed: false, annotationBackup: annotation});\n        }\n    }\n\n    const revert = () => {\n        setAstate({...astate, changed: false, annotation: astate.annotationBackup});\n    };\n\n    if (info) {\n        if (info.state === InfoState.LOADING) {\n            return <CircularProgress/>\n        }\n        return (\n            <Box color=\"error.main\">{info.message}</Box>\n        )\n    }\n\n    return (\n        <Grid container spacing={3}>\n        <Grid item xs={8}>\n          <Annotator image={currentImage} astate={astate} setAstate={updateAState} revert={revert} save={save}/>\n        </Grid>\n        <Grid item xs={4}>\n            <ImageTable images={images} selectedImage={currentImage} onSelect={setCurrent}/>\n            <AnnotationList astate={astate} onUpdate={setAstate}/>\n        </Grid>\n        </Grid>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}